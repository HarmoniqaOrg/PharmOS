version: '3.9'

networks:
  pharmos-dev:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  es_data:
  prometheus_data:
  grafana_data:

services:
  # Core Services
  postgres:
    image: postgres:16-alpine
    container_name: pharmos_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pharmos_db
      POSTGRES_USER: pharmos_user
      POSTGRES_PASSWORD: pharmos_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pharmos-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pharmos_user -d pharmos_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:7
    container_name: pharmos_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - pharmos-dev
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pharmos_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pharmos-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.11.3
    container_name: pharmos_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - pharmos-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application Services
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: pharmos_backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - POSTGRES_URL=postgresql://pharmos_user:pharmos_pass@postgres:5432/pharmos_db
      - MONGODB_URL=mongodb://mongodb:27017/pharmos
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    networks:
      - pharmos-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  ml-service:
    build:
      context: .
      dockerfile: Dockerfile.ml
      target: development
    container_name: pharmos_ml_service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=development
      - POSTGRES_URL=postgresql://pharmos_user:pharmos_pass@postgres:5432/pharmos_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./ml:/app/ml
      - ./src/api:/app/src/api
    networks:
      - pharmos-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: pharmos_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    networks:
      - pharmos-dev
    depends_on:
      - backend
      - ml-service
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana:10.2.0
    container_name: pharmos_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - pharmos-dev
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Exporters for monitoring
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: pharmos_postgres_exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://pharmos_user:pharmos_pass@postgres:5432/pharmos_db?sslmode=disable"
    networks:
      - pharmos-dev
    depends_on:
      postgres:
        condition: service_healthy

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: pharmos_redis_exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
    networks:
      - pharmos-dev
    depends_on:
      redis:
        condition: service_healthy

  mongodb-exporter:
    image: percona/mongodb_exporter:0.40
    container_name: pharmos_mongodb_exporter
    restart: unless-stopped
    ports:
      - "9216:9216"
    environment:
      MONGODB_URI: "mongodb://mongodb:27017"
    networks:
      - pharmos-dev
    depends_on:
      mongodb:
        condition: service_healthy

  elasticsearch-exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:v1.6.0
    container_name: pharmos_elasticsearch_exporter
    restart: unless-stopped
    ports:
      - "9114:9114"
    command:
      - '--es.uri=http://elasticsearch:9200'
    networks:
      - pharmos-dev
    depends_on:
      elasticsearch:
        condition: service_healthy

  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: pharmos_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - pharmos-dev

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: pharmos_cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - pharmos-dev
    privileged: true

  # Log aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: pharmos_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - pharmos-dev

  promtail:
    image: grafana/promtail:2.9.2
    container_name: pharmos_promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./infrastructure/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - pharmos-dev
    depends_on:
      - loki