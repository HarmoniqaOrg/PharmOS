apiVersion: apps/v1
kind: Deployment
metadata:
  name: pharmos-ml-service
  namespace: pharmos
  labels:
    app.kubernetes.io/name: pharmos-ml-service
    app.kubernetes.io/part-of: pharmos-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: pharmos-ml-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pharmos-ml-service
        app.kubernetes.io/part-of: pharmos-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: ml-service
        image: pharmos/ml-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: pharmos-config
              key: ENVIRONMENT
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: POSTGRES_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: pharmos-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pharmos-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: pharmos-config
              key: POSTGRES_DB
        - name: REDIS_URL
          value: "redis://redis:6379/$(REDIS_DB)"
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: pharmos-config
              key: REDIS_DB
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

---
apiVersion: v1
kind: Service
metadata:
  name: pharmos-ml-service
  namespace: pharmos
  labels:
    app.kubernetes.io/name: pharmos-ml-service
    app.kubernetes.io/part-of: pharmos-platform
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: pharmos-ml-service
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pharmos-ml-service-ingress
  namespace: pharmos
  labels:
    app.kubernetes.io/name: pharmos-ml-service
    app.kubernetes.io/part-of: pharmos-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: ml.pharmos.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pharmos-ml-service
            port:
              number: 8000